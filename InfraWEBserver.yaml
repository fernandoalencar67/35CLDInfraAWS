AWSTemplateFormatVersion: '2010-09-09'
Description: FIAP 35CLD ECS WebServer completo funcional via CloudFormation

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  Subnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  ECSOptimizedAMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Escolha uma chave para SSH

Resources:

  Fiap35CLDVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

  Fiap35CLDInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Fiap35CLDVPC
      InternetGatewayId: !Ref Fiap35CLDInternetGateway

  Fiap35CLDPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Fiap35CLDVPC
      CidrBlock: !Ref Subnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  Fiap35CLDPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Fiap35CLDVPC

  Fiap35CLDPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref Fiap35CLDPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Fiap35CLDInternetGateway

  Fiap35CLDSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Fiap35CLDPublicSubnet1
      RouteTableId: !Ref Fiap35CLDPublicRouteTable

  Fiap35CLDSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: FIAP 35CLD ECS Security Group
      VpcId: !Ref Fiap35CLDVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  Fiap35CLDECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Fiap35CLDWebServerCluster

  Fiap35CLDECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: "/"
      Policies:
        - PolicyName: ECSExtraPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "ecs:*"
                Resource: "*"

  Fiap35CLDECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Fiap35CLDECSInstanceRole

  Fiap35CLDEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref EC2KeyPair
      ImageId: !Ref ECSOptimizedAMI
      IamInstanceProfile: !Ref Fiap35CLDECSInstanceProfile
      SecurityGroupIds:
        - !Ref Fiap35CLDSecurityGroup
      SubnetId: !Ref Fiap35CLDPublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "ECS_CLUSTER=${Fiap35CLDECSCluster}" >> /etc/ecs/ecs.config
          echo "ECS_ENABLE_CONTAINER_METADATA=true" >> /etc/ecs/ecs.config
          systemctl enable docker
          systemctl start docker
          docker pull amazon/amazon-ecs-agent:latest
          docker run --detach=true --name ecs-agent \
            --volume=/var/run/docker.sock:/var/run/docker.sock \
            --volume=/var/log/ecs/:/log \
            --volume=/var/lib/ecs/data:/data \
            --net=host \
            --env=ECS_LOGFILE=/log/ecs-agent.log \
            --env=ECS_LOGLEVEL=info \
            --env=ECS_DATADIR=/data \
            --env=ECS_CLUSTER=${Fiap35CLDECSCluster} \
            amazon/amazon-ecs-agent:latest

  Fiap35CLDECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: Fiap35CLDWebServerTaskDef
      Cpu: "256"
      Memory: "512"
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ContainerDefinitions:
        - Name: fiap35cld-web-container
          Image: amazon/amazon-ecs-sample
          PortMappings:
            - ContainerPort: 80
              HostPort: 3000

  Fiap35CLDECSService:
    Type: AWS::ECS::Service
    DependsOn: Fiap35CLDEC2Instance
    Properties:
      Cluster: !Ref Fiap35CLDECSCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref Fiap35CLDECSTaskDefinition
      ServiceName: "Fiap35CLDECSService"

  Fiap35CLDWebServerECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: webserverimage
    

Outputs:
  Fiap35CLDClusterName:
    Value: !Ref Fiap35CLDECSCluster
  Fiap35CLDSecurityGroupID:
    Value: !Ref Fiap35CLDSecurityGroup
  Fiap35CLDPublicSubnet1ID:
    Value: !Ref Fiap35CLDPublicSubnet1
